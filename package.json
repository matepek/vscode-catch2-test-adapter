{
  "name": "vscode-catch2-test-adapter",
  "displayName": "C++ TestMate",
  "description": "Run GoogleTest, Catch2 and DOCtest tests from VSCode and VSCodium",
  "icon": "resources/icon.png",
  "author": "Mate Pek",
  "publisher": "matepek",
  "version": "3.6.31",
  "license": "MIT",
  "homepage": "https://github.com/matepek/vscode-catch2-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/matepek/vscode-catch2-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/matepek/vscode-catch2-test-adapter/issues"
  },
  "categories": [
    "Testing"
  ],
  "keywords": [
    "testmate",
    "c++",
    "test",
    "testing",
    "unit test",
    "catch2",
    "catchorg",
    "gtest",
    "googletest",
    "google test",
    "gmock",
    "googlemock",
    "google mock",
    "doctest",
    "onqtam",
    "google benchmark",
    "gbenchmark"
  ],
  "main": "out/dist/main.js",
  "scripts": {
    "reinstall": "rimraf node_modules package-lock.json && npm install",
    "clean": "rimraf out node_modules vscode-catch2-test-adapter-*.vsix",
    "watch": "tsc -watch -p ./tsconfig.json",
    "compile": "tsc -p ./tsconfig.json",
    "test": "node ./out/test/runTests.js",
    "pretest": "npm run compile",
    "package": "vsce package",
    "deploy": "node ./out/test/repo_scripts/deploy.js",
    "vscode:prepublish": "webpack --config webpack.config.js --mode production",
    "webpack": "webpack --config webpack.config.js --mode development"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "dependencies": {
    "@types/ps-node": "^0.1.1",
    "gaze": "^1.1.3",
    "ps-node": "^0.1.6",
    "tslib": "^2.3.1",
    "vscode-test-adapter-api": "^1.9.0",
    "vscode-test-adapter-util": "^0.7.1",
    "xml2js": "^0.4.23",
    "junit-report-merger": "^2.2.3"
  },
  "devDependencies": {
    "@sentry/node": "^6.11.0",
    "@types/bent": "^7.3.2",
    "@types/chai": "^4.2.21",
    "@types/deep-equal": "^1.0.1",
    "@types/entities": "^2.0.0",
    "@types/fs-extra": "^9.0.12",
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "^16.7.6",
    "@types/request-promise": "4.1.48",
    "@types/sinon": "^10.0.2",
    "@types/source-map-support": "^0.5.4",
    "@types/vscode": "^1.38.0",
    "@types/xml2js": "^0.4.9",
    "@typescript-eslint/eslint-plugin": "^4.29.3",
    "@typescript-eslint/parser": "^4.29.3",
    "bent": "^7.3.12",
    "deep-equal": "^2.0.5",
    "eslint": "^7.32.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "3.4.1",
    "fs-extra": "^10.0.0",
    "glob": "^7.1.7",
    "mocha": "^9.1.1",
    "mocha-eslint": "^7.0.0",
    "prettier": "^2.3.2",
    "raw-loader": "^4.0.2",
    "sinon": "^11.1.2",
    "source-map-support": "^0.5.19",
    "ts-loader": "^9.2.5",
    "typescript": "^4.4.2",
    "vsce": "^1.96.1",
    "vscode-test": "^1.6.1",
    "webpack": "^5.51.1",
    "webpack-bundle-analyzer": "^4.4.2",
    "webpack-cli": "^4.8.0"
  },
  "engines": {
    "vscode": "^1.38.0"
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "languages": [
      {
        "id": "testMate.cpp.testOutput",
        "mimetypes": [
          "text/x-code-output",
          "x-code-output"
        ],
        "firstLine": "(\\[ RUN      \\]|⏱Duration:)"
      }
    ],
    "grammars": [
      {
        "language": "testMate.cpp.testOutput",
        "scopeName": "text.testMate.cpp.testOutput",
        "path": "./syntaxes/cpp.testOutput.tmLanguage.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "C++ TestMate",
      "$comment": "Enums will cause that the vscode will offer auto-completion.",
      "properties": {
        "testMate.cpp.test.executables": {
          "markdownDescription": "A [glob pattern](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) to find test executables. (Relative to the workspace folder or absolute path.) Empty string means disabled. For more option set [testMate.cpp.test.advancedExecutables](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md) instead of this. NOTE: if `testMate.cpp.test.advancedExecutables` is set then this is ignored.",
          "scope": "resource",
          "type": "string",
          "default": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*"
        },
        "testMate.cpp.test.advancedExecutables": {
          "markdownDescription": "Array of executables with a lot of options. (If this is set then `testMate.cpp.test.executables` is ignored.) ([Details](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)).",
          "scope": "resource",
          "type": "array",
          "items": {
            "markdownDescription": "An object which describes an executable-set with settings. ([Details](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md))",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "comment": {
                "markdownDescription": "One can wite comments here about the config just like using $comment",
                "type": "string"
              },
              "pattern": {
                "markdownDescription": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ⚠️**Avoid backslash!**: NO `\\\\`; (required) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                      "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe",
                      "${command:cmake.buildDirectory}"
                    ],
                    "minLength": 1
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "name": {
                "markdownDescription": "The name of the test suite (file). Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${filename}",
                      "${relPath}",
                      "${absPath}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "markdownDescription": "A less prominent text after the `name`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${relDirpath}/",
                      "${absDirpath}/"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "cwd": {
                "markdownDescription": "The current working directory for the test executable. If it isn't provided and `test.workingDirectory` does then that will be used. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${absDirpath}",
                      "${relDirpath}",
                      "${workspaceDirectory}",
                      "${workspaceFolder}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "env": {
                "markdownDescription": "Environment variables for the test executable. Can contains variables related to `pattern` and variables related to the process's environment variables (Ex.: `${os_env:PATH}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "${absPath}",
                        "${relPath}",
                        "${absDirpath}",
                        "${relDirpath}",
                        "${filename}",
                        "${baseFilename}",
                        "${extFilename}",
                        "${workspaceDirectory}",
                        "${workspaceFolder}",
                        "${workspaceName}",
                        "${cwd}",
                        "${os_env:PATH}"
                      ]
                    },
                    {
                      "type": "string",
                      "minLength": 1
                    }
                  ]
                }
              },
              "envFile": {
                "markdownDescription": "File containing environment variables for the test executable. (As a JSON object.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "string"
              },
              "executionWrapper": {
                "markdownDescription": "Specifies an executor which wraps the executions. Useful for emulators. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "path": {
                    "description": "The path of the executor",
                    "type": "string"
                  },
                  "args": {
                    "description": "An array wich specifies the arguments of the executor. It should contain '${cmd}', '${argsFlat}' and '${argsStr}' too. Default: ['${cmd}', '${argsFlat}'].",
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "${cmd}",
                            "${argsFlat}",
                            "${argsStr}"
                          ]
                        },
                        {
                          "type": "string",
                          "minLength": 0
                        }
                      ]
                    },
                    "minItems": 2
                  }
                },
                "required": [
                  "path"
                ]
              },
              "sourceFileMap": {
                "markdownDescription": "Replaces the key with the value in the souce file path. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "dependsOn": {
                "markdownDescription": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "runTask": {
                "markdownDescription": "Tasks to run before running/debugging tests. The task should be defined like any other task in vscode (e.g. in tasks.json). If the task exits with a non-zero code, execution of tests will be halted. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "before": {
                    "markdownDescription": "Name of the tasks to execute before running/debugging test-set. Test executable names are accessible using: - `${absPathArrayFlat}: add this to 'args' array; - ${absPathConcatWithSpace}`",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "beforeEach": {
                    "markdownDescription": "Name of the tasks to execute before running/debugging each executables. Variables like `${absPath}` will be substituted before running the task.`",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "after": {
                    "markdownDescription": "Name of the tasks to execute after running/debugging test-set. Test executable names are accessible using: - `${absPathArrayFlat}: add this to 'args' array; - ${absPathConcatWithSpace}``",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "afterEach": {
                    "markdownDescription": "Name of the tasks to execute after running/debugging each executables. Variables like `${absPath}` will be substituted before running the task.`",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              },
              "parallelizationLimit": {
                "markdownDescription": "The variable maximize the number of the parallel execution of one executable instance. Note: `testMate.cpp.test.parallelExecutionLimit` is a global limit. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                "type": "integer",
                "default": 1,
                "minimum": 1
              },
              "strictPattern": {
                "markdownDescription": "Test loading fails if one of the files matched by `pattern` is not a test executable. (Helps noticing unexpected crashes/problems under test loading.)",
                "type": "boolean",
                "default": false
              },
              "markAsSkipped": {
                "markdownDescription": "If true then all the tests related to the pattern are skipped. They can be run manually though.",
                "type": "boolean",
                "default": false
              },
              "waitForBuildProcess": {
                "markdownDescription": "(experimental) Prevents the extension of auto-reloading. With this linking failure might can be avoided.",
                "type": "boolean",
                "default": false
              },
              "darwin": {
                "markdownDescription": "Overrides the parent's properties on the given OS.",
                "type": "object",
                "additionalProperties": true
              },
              "linux": {
                "markdownDescription": "Overrides the parent's properties on the given OS.",
                "type": "object",
                "additionalProperties": true
              },
              "win32": {
                "markdownDescription": "Overrides the parent's properties on the given OS.",
                "type": "object",
                "additionalProperties": true
              },
              "catch2": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "boolean"
                  },
                  "debug.enableOutputColouring": {
                    "markdownDescription": "Sets the colouring of the output for debug session.",
                    "type": "boolean"
                  },
                  "failIfExceedsLimitNs": {
                    "markdownDescription": "Sets `cpu_time` limit for **gbenchmark**. (unit: nanoseconds)",
                    "type": "number"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByTagRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "gtest": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "boolean"
                  },
                  "debug.enableOutputColouring": {
                    "markdownDescription": "Sets the colouring of the output for debug session.",
                    "type": "boolean"
                  },
                  "failIfExceedsLimitNs": {
                    "markdownDescription": "Sets `cpu_time` limit for **gbenchmark**. (unit: nanoseconds)",
                    "type": "number"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByTagRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "doctest": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "boolean"
                  },
                  "debug.enableOutputColouring": {
                    "markdownDescription": "Sets the colouring of the output for debug session.",
                    "type": "boolean"
                  },
                  "failIfExceedsLimitNs": {
                    "markdownDescription": "Sets `cpu_time` limit for **gbenchmark**. (unit: nanoseconds)",
                    "type": "number"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByTagRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "gbenchmark": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "boolean"
                  },
                  "debug.enableOutputColouring": {
                    "markdownDescription": "Sets the colouring of the output for debug session.",
                    "type": "boolean"
                  },
                  "failIfExceedsLimitNs": {
                    "markdownDescription": "Sets `cpu_time` limit for **gbenchmark**. (unit: nanoseconds)",
                    "type": "number"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByTagRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "cpputest": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "debug.enableOutputColouring": {
                    "markdownDescription": "Sets the colouring of the output for debug session.",
                    "type": "boolean"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByTagRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by the first match group of the first matching regex. (`${match}`, `${match_lowercased}`, `${match_upperfirst}`) Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupByExecutable": {
                            "type": "object"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByTagRegex": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        "testMate.cpp.test.workingDirectory": {
          "markdownDescription": "Sets the working directory of the test executable (relative to the workspace folder or absolute path). Note: `testMate.cpp.advancedExecutables` overwrites it locally. ([Variables](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/test.advancedExecutables.md#variables))",
          "scope": "resource",
          "type": "string",
          "default": "${absDirpath}",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "${absDirpath}",
                "${relDirpath}",
                "${workspaceDirectory}",
                "${workspaceFolder}"
              ]
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "testMate.cpp.test.randomGeneratorSeed": {
          "markdownDescription": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "scope": "resource",
          "type": "string",
          "default": "",
          "pattern": "^(|time|[0-9]+)$"
        },
        "testMate.cpp.test.runtimeLimit": {
          "markdownDescription": "[seconds] Test executable is running in a process. In case of an infinite loop it will run forever unless this parameter is set. It applies instantly. (0 means infinite)",
          "scope": "resource",
          "type": "integer",
          "default": 600,
          "minimum": -1
        },
        "testMate.cpp.test.parallelExecutionLimit": {
          "markdownDescription": "Maximizes the number of the parallel test executions. (It applies instantly.) Note: If your executables depend on the **same resource** exclusively then this **could cause a problem**.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "testMate.cpp.test.parallelExecutionOfExecutableLimit": {
          "markdownDescription": "Maximizes the number of the parallel execution of executables. To enable this just for specific executables use the `testMate.cpp.test.advancedExecutables` -> `parallelizationLimit`. The `testMate.cpp.test.parallelExecutionLimit` is a global limit and this is a local one. Note: If your **test cases** depend on the **same resource** exclusively then this **could cause a problem**.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "testMate.cpp.discovery.gracePeriodForMissing": {
          "markdownDescription": "[seconds] Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "scope": "resource",
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "testMate.cpp.discovery.runtimeLimit": {
          "markdownDescription": "[seconds] The timeout of the test-executable used to identify it (Calls the exec with `--help`).",
          "scope": "resource",
          "type": "integer",
          "default": 5,
          "minimum": 1,
          "maximum": 900
        },
        "testMate.cpp.discovery.testListCaching": {
          "markdownDescription": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.)",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "testMate.cpp.discovery.strictPattern": {
          "markdownDescription": "Test loading fails if one of the files matched by `test.executable` is not a test executable. (Helps noticing unexpected crashes/problems under test loading.)",
          "scope": "resource",
          "type": "boolean",
          "default": null
        },
        "testMate.cpp.debug.configTemplate": {
          "markdownDescription": "Sets the necessary debug configurations and the debug button will work.",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${exec}",
                      "${argsArray}",
                      "${argsArrayFlat}",
                      "${argsStr}",
                      "${cwd}",
                      "${envObj}",
                      "${envObjArray}",
                      "${sourceFileMapObj}",
                      "${label}",
                      "${suiteLabel}"
                    ]
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "extensionOnly"
              ]
            }
          ]
        },
        "testMate.cpp.debug.breakOnFailure": {
          "markdownDescription": "Debugger breaks on failure while debugging the test. Catch2: [--break](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#breaking-into-the-debugger); Google Test: [--gtest_break_on_failure](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#turning-assertion-failures-into-break-points);",
          "scope": "resource",
          "type": "boolean",
          "default": true
        },
        "testMate.cpp.debug.noThrow": {
          "markdownDescription": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: [--nothrow](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#eliding-assertions-expected-to-throw);",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "testMate.cpp.log.logpanel": {
          "markdownDescription": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "testMate.cpp.log.logfile": {
          "markdownDescription": "Writes the log message into the given file. Empty means disabled.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "testMate.cpp.log.logSentry": {
          "markdownDescription": "Errors/Exceptions will be logged and sent automatically for further analysis. ([More](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/log.logSentry.md))",
          "scope": "resource",
          "type": "string",
          "default": "question"
        },
        "testMate.cpp.log.userId": {
          "markdownDescription": "A locally generated identifier which is used to group the errors/events. Not used for anything evil. Anonymity is preserved.",
          "scope": "application",
          "type": "string"
        },
        "testMate.cpp.gtest.treatGmockWarningAs": {
          "markdownDescription": "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`. (You may should consider using [testing::StrictMock<T>](https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md#the-nice-the-strict-and-the-naggy-nicestrictnaggy))",
          "deprecationMessage": "Will stop working unless you open an issue and tell me that how much you love it.",
          "scope": "resource",
          "type": "string",
          "default": "nothing",
          "enum": [
            "nothing",
            "failure"
          ],
          "enumDescriptions": [
            "",
            "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`."
          ]
        },
        "testMate.cpp.gtest.gmockVerbose": {
          "markdownDescription": "Sets [--gmock_verbose=...](https://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#flags). (Note: executable has to be linked to gmock `gmock_main` not `gtest_main`)",
          "deprecationMessage": "Will stop working unless you open an issue and tell me that how much you love it.",
          "scope": "resource",
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "info",
            "warning",
            "error"
          ],
          "enumDescriptions": [
            "--gmock_verbose=... parameter won't be added",
            "Google Mock will print all informational messages, warnings, and errors (most verbose). At this setting, Google Mock will also log any calls to the ON_CALL/EXPECT_CALL macros.",
            "Google Mock will print both warnings and errors (less verbose). This is the default.",
            "Google Mock will print errors only (least verbose)."
          ]
        }
      }
    }
  }
}
